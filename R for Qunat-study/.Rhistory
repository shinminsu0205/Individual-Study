KOSPI200_tilt = KOSPI200%>%
select(종목명, PBR, 시가총액비중, 랭킹)%>%
mutate(zscore = -scale(랭킹),
cdf = pnorm(zscore),
투자비중 = 시가총액비중 * cdf,
투자비중 = 투자비중 / sum(투자비중),
차이 = 투자비중 - 시가총액비중)
head(KOSPI200_tilt)
KOSPI200%>%
ggplot(aes(x=reorder(종목명,-시가총액비중),y=시가총액비중))+
geom_point()+
geom_point(data=KOSPI200_tilt,aes(x=reorder(종목명, -시가총액비중),y=투자비중),
color = 'red',shape = 4)+
xlab('종목명')+
ylab('비중(%)')+
coord_cartesian(ylim=c(0,0.03))+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by=5),'종목명'])+
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
##제약을 거는 경우
KOSPI200_tilt%>%
ggplot(aes(x=reorder(종목명,-시가총액비중),y=차이))+
geom_point()+
geom_hline(aes(yintercept = 0.005),color = 'red')+
geom_hline(aes(yintercept = -0.005), color = 'red')+
xlab('종목명')+
ylab('비중차이(%)')+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by=5),'종목명'])+
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
KOSPI200_tilt = KOSPI200_tilt%>%
mutate_at(vars(투자비중),list(~ifelse(차이 < -0.0005, 시가총액비중 - 0.0005, 투자비중)))%>%
mutate_at(vars(투자비중),list(~ifelse(차이 >0.0005, 시가총액비중 + 0.0005, 투자비중)))%>%
mutate(투자비중 = 투자비중/sum(투자비중),
차이 = 투자비중 - 시가총액비중)
head(KOSPI200_tilt)
while(max(abs(KOSPI200_tilt$차이))>(0.005+0.00001)){
KOSPI200_tilt = KOSPI200_tilt%>%
mutate_at(vars(투자비중),list(~ifelse(차이 < -0.005, 시가총액비중 - 0.005, 투자비중)))%>%
mutate_at(vars(투자비중),list(~ifelse(차이 >0.005, 시가총액비중 + 0.005, 투자비중)))%>%
mutate(투자비중 = 투자비중/sum(투자비중),
차이 = 투자비중 - 시가총액비중)
}
head(KOSPI200_tilt)
KOSPI200_tilt %>%
ggplot(aes(x=reorder(종목명,-시가총액비중),y=차이))+
geom_point()+
geom_hline(aes(yintercept = 0.005),color = 'red')+
geom_hline(aes(yintercept = -0.005), color = 'red')+
xlab('종목명')+
ylab('비중차이(%)')+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by = 5),'종목명'])+
scale_y_continuous(labels = scale::percent)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
KOSPI200_tilt %>%
ggplot(aes(x=reorder(종목명,-시가총액비중),y=차이))+
geom_point()+
geom_hline(aes(yintercept = 0.005),color = 'red')+
geom_hline(aes(yintercept = -0.005), color = 'red')+
xlab('종목명')+
ylab('비중차이(%)')+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by = 5),'종목명'])+
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
KOSPI200 %>%
ggplot(aes(x=reorder(종목명,-시가총액비중),y = 시가총액비중))+
geom_point()+
geom_point(data = KOSPI200_tilt, aes(x=reorder(종목명,-시가총액비중),y=투자비중),
color = 'red',shape = 4)+
xlab('종목명')+
ylab('비중(%)')+
coord_cartesian(ylim = c(0,0.03))+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by = 5),'종목명'])+
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
KOSPI200_tilt_mod = KOSPI200_tilt%>%arrange(PBR)
KOSPI200_tilt_mod %>%
ggplot(aes(x=reorder(종목명,PBR),y=차이))+
geom_point()+
geom_col(aes(x=reorder(종목명,PBR),y=PBR/2000),fill='blue',alpha = 0.2)+
xlab('종목명')+
ylab('차이(%)')+
scale_y_continuous(labels = scales::percent,
sec.axis = sec_axis(~.* 2000,name = "PBR"))+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by=5),'종목명'])+
theme(axis.text.x = element_text(anlge = 60, hjust = 1))
KOSPI200_tilt_mod = KOSPI200_tilt%>%arrange(PBR)
KOSPI200_tilt_mod %>%
ggplot(aes(x=reorder(종목명,PBR),y=차이))+
geom_point()+
geom_col(aes(x=reorder(종목명,PBR),y=PBR/2000),fill='blue',alpha = 0.2)+
xlab('종목명')+
ylab('차이(%)')+
scale_y_continuous(labels = scales::percent,
sec.axis = sec_axis(~.* 2000,name = "PBR"))+
scale_x_discrete(breaks = KOSPI200[seq(1,200,by=5),'종목명'])+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
setwd("C:\\Users\\kyle0\\Desktop\\Git\\Individual-Study\\R for Qunat-study")
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
ticker = c('SPY','TLT')
getSymbols(ticker)
ticker = c('SPY','TLT')
getSymbols(ticker)
prices = do.call(cbind,lapply(ticker,function(x)Ad(get(x))))
rets = Return.calculate(prices)%>%na.omit()
cor(rets)
portfolio = Return.portfolio(R= rets,
weights = c(0.6,0.4),
rebalance_on = 'years',
verbose = TRUE)
portfolios = cbind(rets, portfolio$returns)%>%
setNames(c('주식','채권','60대40'))
charts.PerformanceSummary(portfolios, main = "60대40 포트폴리오")
turnover = xts(
rowSums(abs(portfolio$BOP.Weight - timeSeries::lag(portfolio$EOP.Weight)),
na.rm=TRUE),
order.by = index(portfolio$BOP.Weight)
)
chart.TimeSeries(turnover)
#시점선택 전략 백테스팅
library(quantmod)
library(PerformanceAnalytics)
symbols = c('SPY','SHY')
symbols = c('SPY','SHY')
getSymbols(symbols)
prices = do.call(cbind,lapply(symbols,function(x)Ad(get(x))))
rets = na.omit(Return.calculate(prices))
ep = endpoints(rets, on = 'months')
wts = list() #weights를 넣을 빈 리스트 생성
lookback = 10 #n개월 이동평균 값
i = lookback + 1
sub_price = prices[ep[i-lookback]:ep[i],1]
head(sub_price,3)
sma = mean(sub_price)
wt = rep(0,2)
for (i in (lookback + 1): length(ep)){
sub_price = prices[ep[i-lookback]: ep[i],1]
sma = mean(sub_price)
wt = rep(0,2)
wt[1] = ifelse(last(sub_price)>sma,1,0)
wt[2] = 1 - wt[1]
wts[[i]] = xts(t(wt),order.by = index(rets[ep[i]]))
}
wts = do.call(rbind,wts)
Tactical = Return.portfolio(rets,wts, verbose = TRUE)
wts = do.call(rbind,wts)
Tactical = Return.portfolio(rets,wts, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1],Tactical$returns))%>%
setNames(c('매수 후 보유','시점 선택 전략'))
wts = list()
for (i in (lookback + 1): length(ep)){
sub_price = prices[ep[i-lookback]: ep[i],1]
sma = mean(sub_price)
wt = rep(0,2)
wt[1] = ifelse(last(sub_price)>sma,1,0)
wt[2] = 1 - wt[1]
wts[[i]] = xts(t(wt),order.by = index(rets[ep[i]]))
}
wts = do.call(rbind,wts)
Tactical = Return.portfolio(rets,wts, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1],Tactical$returns))%>%
setNames(c('매수 후 보유','시점 선택 전략'))
wts
charts.PerformanceSummary(portfolios,main=
"BUY & HOLD vs Tactical")
library(quantmod)
library(PerformanceAnalytics)
library(RiskPortfolios)
library(tidyr)
library(dplyr)
library(ggplot2)
symbols = c('SPY', #미국 주식
'IEV', #유럽 주식
'EWJ', #일본 주식
'EEM', #이머징 마켓
'TLT', #미국 장기채
'IEF', #미국 중기채
'IYR', #미국 리츠
'VNQ', #글로벌 리츠
'GLD', #금
'DBC') #상품
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x)Ad(get(x))))%>%
setNames(symbols)
rets = Return.calculate(prices)%>%na.omit()
ep = endpoints(rets, on = 'months')
wts = list()
lookback = 12
wt_zero = rep(0,10)%>%setNames(colnames(rets))
for(i in (lookback + 1):length(ep)){
sub_ret = rets[ep[i-lookback]:ep[i],]
cum = Return.cumulative(sub_ret)
K=rank(-cum)<=5
covmat = cov(sub_ret[,K])
wt = wt_zero
wt[k] = optimalPortfolio(covmat,
control = list(type = 'minvol',
constraint = 'user',
LB = rep(0.1,5),
UB = rep(0.3,5)))
wts[[i]] = xts(t(wt),order.by = index(rets[ep[i]]))
}
wts = do.call(rbind,wts)
for(i in (lookback + 1):length(ep)){
sub_ret = rets[ep[i-lookback]:ep[i],]
cum = Return.cumulative(sub_ret)
K=rank(-cum)<=5
covmat = cov(sub_ret[,K])
wt = wt_zero
wt[K] = optimalPortfolio(covmat,
control = list(type = 'minvol',
constraint = 'user',
LB = rep(0.1,5),
UB = rep(0.3,5)))
wts[[i]] = xts(t(wt),order.by = index(rets[ep[i]]))
}
wts = do.call(rbind,wts)
GDAA = Return.portfolio(rets, wts, verbose = TRUE)
charts.PerformanceSummary(GDAA$returns,main = '동적 자산 배분')
wts%>%fortify.zoo()%>%
gather(key,valye,-Index)%>%
mutate(Index = as.Date(Index))%>%
mutate(key = factor(key,levels = unique(key)))%>%
ggplot(aes(x=Index,y=value))+
geom_area(aes(color = key, fill=key),
position = 'stack')+
xlab(NULL)+ylab(NULL)+theme_bw()+
scale_x_date(date_breaks = "years",date_labels = "%Y", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
theme(plot.title = element_text(hjust = 0.5,
size = 12),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor.x = element_blank())+
guides(color = guide_legend(byrow=TRUE))
wts%>%fortify.zoo()%>%
gather(key,value,-Index)%>%
mutate(Index = as.Date(Index))%>%
mutate(key = factor(key,levels = unique(key)))%>%
ggplot(aes(x=Index,y=value))+
geom_area(aes(color = key, fill=key),
position = 'stack')+
xlab(NULL)+ylab(NULL)+theme_bw()+
scale_x_date(date_breaks = "years",date_labels = "%Y", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
theme(plot.title = element_text(hjust = 0.5,
size = 12),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor.x = element_blank())+
guides(color = guide_legend(byrow=TRUE))
GDAA$turnover = xts(
rowSums(abs(GDAA$BOP.Weight - timeSeries::lag(GDAA$EOP.Weight)),
na.rm=TRUE),
order.by = index(GDAA$BOP.Weight)
)
chart.TimeSeries(GDAA$turnover)
fee = 0.0030
GDAA$net = GDAA$returns - GDAA$turnover*fee
cbind(GDAA$returns, GDAA$net)%>%
setNames(c('No Fee','After Fee'))%>%
charts.PerformanceSummary(main = 'GDAA')
setwd("C:\\Users\\kyle0\\Desktop\\Git\\Individual-Study\\R for Qunat-study")
library(dplyr)
library(readxl)
library(dplyr)
library(readxl)
library(xts)
library(timetk)
url = "https://images.aqr.com/-/media/AQR/Documents/Insights/Data-Sets/Quality-Minus-Junk-Factors-Monthly.xlsx"
tf = tempfile(fileext = '.xlsx')
download.file(url,tf,mode = 'wb')
excel_sheets(tf)
df_QMJ = read_xlsx(tf, sheet = 'QMJ Factors',skip = 18)%>%
select(DATE,Global)
df_MKT = read_xlsx(tf, sheet = 'MKT',skip = 18)%>%
select(DATE, Global)
df_SMB = read_xlsx(tf, sheet = 'SMB',skip = 18)%>%
select(DATE, Global)
df_HML_Devil = read_xlsx(tf,sheet = 'HML_Devil', skip = 18)%>%
select(DATE, Global)
df_UMD = read_xlsx(tf, sheet = 'UMD', skip =18)%>%
select(DATE,Global)
df_RF = read_xlsx(tf, sheet = 'RF', skip = 18)
df_HML_Devil = read_xlsx(tf,sheet = 'HML Devil', skip = 18)%>%
select(DATE, Global)
df_UMD = read_xlsx(tf, sheet = 'UMD', skip =18)%>%
select(DATE,Global)
df_RF = read_xlsx(tf, sheet = 'RF', skip = 18)
# 결과 측정 지표
##수익률 및 변동성
library(PerformanceAnalytics)
chart.CumReturns(df$QMJ)
df = Reduce(function(x,y) inner_join(x,y, by = 'DATE'), #inner_join함수가 최대 두 개밖에 선택을 못 하므로 Reduce함수를 사용해서 모든 테이블을 선택해서 합칠 수 있도록 만듦.
list(df_QMJ,df_MKT,df_SMB,df_HML_Devil,df_UMD,df_RF))%>%
setNames(c('DATE','QMJ','MKT','SMB','HML','UMD','RF'))%>%
na.omit()%>%
mutate(DATE = as.Date(DATE,"%m/%d/%Y"),
R_excess = QMJ-RF,
Mkt_excess = MKT-RF)%>%
tk_xts(date_var = DATE) #티블 형태 데이터를 시계열 형태로 변경, 인덱스는 DATE 열
View(df)
library(PerformanceAnalytics)
chart.CumReturns(df$QMJ)
prod((1+df$QMJ))-1 #누적 수익률률
mean(df$QMJ) * 12 #연율화 수익률률
(prod((1+df$QMJ)))^(12/nrow(df$QMJ)) -1 #연율화 수익률(기하)
Return.cumulative(df$QMJ)
Return.annualized(df$QMJ, geometric = FALSE)
Return.annualized(df$QMJ,geometric = TRUE)
sd(df$QMJ)*sqrt(12) #연율화 변동성성
StdDev.annualized(df$QMJ) #연율화 변동성
SharpeRatio.annualized(df$QMJ,Rf = df$RF, geometric = TRUE)
##낙폭과 최대낙폭
table.Drawdowns(df$QMJ)
maxDrawdown(df$QMJ)
chart.Drawdown(df$QMJ)
##CalmarRatio: 연율화수익률/최대낙폭 --> 절대 안전 투자를 추구하는 헤지펀드에서 자주 활용
CalmarRatio(df$QMJ)
##연도별 수익률
apply.yearly(df$QMJ,Return.cumulative)%>%head()
library(lubridate)
library(tidyr)
library(ggplot2)
R.yr = apply.yearly(df$QMJ,Return.cumulative)%>%
fortify.zoo()%>%
mutate(Index = year(Index))%>%
gather(key,value,-Index)%>%
mutate(key = factor(key,levels=unique(key)))
ggplot(R.yr,aes(x=Index,y=value,fill = key))+
geom_bar(position = "dodge",stat="identity")+
ggtitle('Yearly Return')+
xlab(NULL)+
ylab(NULL)+
theme_bw()+
scale_y_continuous(expand=c(0.03,0.03))+
scale_x_continuous(breaks = R.yr$Index,
expand = c(0.01,0.01))+
theme(plot.title = element_text(hjust = 0.5,size = 12),
legend.position = 'bottom',
legend.title = element_blank(),
legend.text = element_text(size = 7),
axis.text.x = element_text(angle=45,hjust=1,size = 8),
panel.grid.minor.x = element_blank())+
guides(fill = guide_legend(byrow = TRUE))+
geom_text(aes(label = paste(round(value*100,2),"%"),
vjust = ifelse(value>=0,-0.5,1.5)),
position = position_dodge(width = 1),
size = 3)
##승률 및 롤링 윈도우값
##승률 : (포트폴리오 수익률 > 벤치마크)일 수/전체기간
##벤치마크는 S&P500, KOSPI200과 같은 지수이기도 하지만 헤지펀드의 경우 0 또는 무위험수익률이기도 함.
UpsideFrequency(df$QMJ,MAR = 0)
roll_12 = df$QMJ %>% apply.monthly(.,Return.cumulative)%>%
rollapply(.,12,Return.annualized)%>%na.omit()%>%
UpsideFrequency()
roll_24 = df$QMJ%>%apply.monthly(.,Return.cumulative)%>%
rollapply(.,24,Return.annualized)%>%na.omit()%>%
UpsideFrequency()
roll_36 = df$QMJ%>%apply.monthly(.,Return.cumulative)%>%
rollapply(.,36,Return.annualized)%>%na.omit()%>%
UpsideFrequency()
roll_win = cbind(roll_12,roll_24,roll_36)
print(roll_win)
df$QMJ %>% apply.monthly(.,Return.cumulative)%>%
rollapply(.,12,Return.annualized)%>%na.omit()%>%
fortify.zoo()%>%
ggplot(aes(x=Index,y=QMJ))+
geom_line()+
geom_hline(aes(yintercept = 0),color = 'red')+
xlab(NULL)+ylab(NULL)
reg = lm(R_excess ~ Mkt_excess + SMB + HML + UMD, data = df)
#summary(reg)
summary(reg)$coefficient
library(broom)
tidy(reg)
library(stargazer)
stargazer(reg,type='text',out='data/reg_table.html')
setwd("C:\\Users\\kyle0\\Desktop\\Git\\Individual-Study\\R for Qunat-study")
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
ticker = c('SPY','TLT')
getSymbols(ticker)
prices = do.call(cbind,lapply(ticker,function(x)Ad(get(x))))
rets = Return.calculate(prices)%>%na.omit()
cor(rets)
portfolio = Return.portfolio(R= rets,
weights = c(0.6,0.4),
rebalance_on = 'years',
verbose = TRUE)
portfolios = cbind(rets, portfolio$returns)%>%
setNames(c('주식','채권','60대40'))
charts.PerformanceSummary(portfolios, main = "60대40 포트폴리오")
turnover = xts(
rowSums(abs(portfolio$BOP.Weight - timeSeries::lag(portfolio$EOP.Weight)),
na.rm=TRUE),
order.by = index(portfolio$BOP.Weight)
)
#lag 함수 : 한 단계씩 끌어내림.
chart.TimeSeries(turnover)
#시점선택 전략 백테스팅
library(quantmod)
library(PerformanceAnalytics)
symbols = c('SPY','SHY') #shy : 미국 단기채 수익률 추종 ETF
getSymbols(symbols)
prices = do.call(cbind,lapply(symbols,function(x)Ad(get(x))))
rets = na.omit(Return.calculate(prices))
ep = endpoints(rets, on = 'months') #rets의 월별 말일의 위치를 반환
wts = list() #weights를 넣을 빈 리스트 생성
lookback = 10 #n개월 이동평균 값
i = lookback + 1
sub_price = prices[ep[i-lookback]:ep[i],1]
head(sub_price,3)
sma = mean(sub_price)
wt = rep(0,2)
wt[1] = ifelse(last(sub_price)>sma,1,0) #주식 비중
wt[2] = 1 - wt[1] #현금 비중 = 1 - 주식비중
#반복하면서 전체기간에 적용
wts = list()
for (i in (lookback + 1): length(ep)){
sub_price = prices[ep[i-lookback]: ep[i],1]
sma = mean(sub_price)
wt = rep(0,2)
wt[1] = ifelse(last(sub_price)>sma,1,0)
wt[2] = 1 - wt[1]
wts[[i]] = xts(t(wt),order.by = index(rets[ep[i]]))
}
wts = do.call(rbind,wts)
Tactical = Return.portfolio(rets,wts, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1],Tactical$returns))%>%
setNames(c('매수 후 보유','시점 선택 전략'))
charts.PerformanceSummary(portfolios,main=
"BUY & HOLD vs Tactical")
#동적 자산 배분
#1)과거 12개월 수익률이 높은 5개 자산 선택
#2)최소분산 포트폴리오를 구성하며, 개별 투자비중은 10~30% 사이로만
#3)매월 리밸런싱
library(quantmod)
library(PerformanceAnalytics)
library(RiskPortfolios)
library(tidyr)
library(dplyr)
library(ggplot2)
symbols = c('SPY', #미국 주식
'IEV', #유럽 주식
'EWJ', #일본 주식
'EEM', #이머징 마켓
'TLT', #미국 장기채
'IEF', #미국 중기채
'IYR', #미국 리츠
'VNQ', #글로벌 리츠
'GLD', #금
'DBC') #상품
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x)Ad(get(x))))%>%
setNames(symbols)
rets = Return.calculate(prices)%>%na.omit()
ep = endpoints(rets, on = 'months')
wts = list()
lookback = 12
wt_zero = rep(0,10)%>%setNames(colnames(rets))
for(i in (lookback + 1):length(ep)){
sub_ret = rets[ep[i-lookback]:ep[i],]
cum = Return.cumulative(sub_ret)
K=rank(-cum)<=5
covmat = cov(sub_ret[,K])
wt = wt_zero
wt[K] = optimalPortfolio(covmat,
control = list(type = 'minvol',
constraint = 'user',
LB = rep(0.1,5),
UB = rep(0.3,5)))
wts[[i]] = xts(t(wt),order.by = index(rets[ep[i]]))
}
wts = do.call(rbind,wts)
GDAA = Return.portfolio(rets, wts, verbose = TRUE)
charts.PerformanceSummary(GDAA$returns,main = '동적 자산 배분')
wts%>%fortify.zoo()%>%
gather(key,value,-Index)%>%
mutate(Index = as.Date(Index))%>%
mutate(key = factor(key,levels = unique(key)))%>%
ggplot(aes(x=Index,y=value))+
geom_area(aes(color = key, fill=key),
position = 'stack')+
xlab(NULL)+ylab(NULL)+theme_bw()+
scale_x_date(date_breaks = "years",date_labels = "%Y", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
theme(plot.title = element_text(hjust = 0.5,
size = 12),
legend.position = 'bottom',
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor.x = element_blank())+
guides(color = guide_legend(byrow=TRUE))
GDAA$turnover = xts(
rowSums(abs(GDAA$BOP.Weight - timeSeries::lag(GDAA$EOP.Weight)),
na.rm=TRUE),
order.by = index(GDAA$BOP.Weight)
)
chart.TimeSeries(GDAA$turnover)
fee = 0.0030
GDAA$net = GDAA$returns - GDAA$turnover*fee
cbind(GDAA$returns, GDAA$net)%>%
setNames(c('No Fee','After Fee'))%>%
charts.PerformanceSummary(main = 'GDAA')
View(VNQ)
View(EWJ)
